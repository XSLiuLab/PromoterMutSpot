GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
gtf <- data.table::fread(GTF, header = FALSE, skip = "#")
head(gtf)
gtf <- gtf[V3 == "gene"]
gtf
extractGtfCol <- function(x, name) {
requireNamespace(magrittr)
stringr::str_extract(x, paste0(name, " ([^;]+);")) %>%
stringr::str_remove(paste0(name, " ")) %>%
stringr::str_remove_all("\"") %>%
stringr::str_remove(";")
}
gtf[, gene_name := extractGtfCol(V9, "gene_name")]
requireNamespace("magrittr")
extractGtfCol <- function(x, name) {
requireNamespace("magrittr")
stringr::str_extract(x, paste0(name, " ([^;]+);")) %>%
stringr::str_remove(paste0(name, " ")) %>%
stringr::str_remove_all("\"") %>%
stringr::str_remove(";")
}
gtf[, gene_name := extractGtfCol(V9, "gene_name")]
extractGtfCol <- function(x, name) {
loadNamespace("magrittr")
stringr::str_extract(x, paste0(name, " ([^;]+);")) %>%
stringr::str_remove(paste0(name, " ")) %>%
stringr::str_remove_all("\"") %>%
stringr::str_remove(";")
}
gtf[, gene_name := extractGtfCol(V9, "gene_name")]
extractGtfCol <- function(x, name) {
require("magrittr")
stringr::str_extract(x, paste0(name, " ([^;]+);")) %>%
stringr::str_remove(paste0(name, " ")) %>%
stringr::str_remove_all("\"") %>%
stringr::str_remove(";")
}
gtf[, gene_name := extractGtfCol(V9, "gene_name")]
gtf
gtf[, gene_biotype := extractGtfCol(V9, "gene_biotype")]
gtf
gtf[gene_biotype == "protein_coding", .(V1, V4, V5, V7, gene_name)]
gtf = gtf[gene_biotype == "protein_coding", .(V1, V4, V5, V7, gene_name)]
colnames(gtf) = c("chr", "start", "end", "strand", "gene_name")
gtf
upstream = 5000
downstream = -1
gtf[, chr := paste0("chr", chr)]
gtf[, gene_start := start]
gtf[, gene_end := end]
gtf
gtf[, `:=`(
start = ifelse(strand == "+", gene_start - upstream, gene_end - downstream),
end   = ifelse(strand == "+", gene_start + downstream, gene_end + upstream)
)]
gtf
gtf[, start := ifelse(start < 1, 1, start)]
table(gtf$chr)
chrs = paste0("chr", c(1:22, "X", "Y"))
chrs
gtf
gtf = gtf[chr %in% chrs]
gtf
str(gtf)
system("sort")
Sys.which("sort")
assert_sort_exists = function() {
if (length(Sys.which("sort")) < 1) {
stop("'sort' command not found. Are you in unix environment? If you are, check your PATH.")
}
}
assert_command_exists = function(cmd) {
if (length(Sys.which(cmd)) < 1) {
stop(paste0("'", cmd, "'"),
"command not found. Are you in unix environment? If you are, check your PATH.")
}
}
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/icgc_data/预处理所有突变.tsv"
source("functions.R")
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/icgc_data/预处理所有突变.tsv"
source("functions.R")
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/icgc_data/预处理所有突变.tsv"
source("functions.R")
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
source('~/PromoterMutSpot/functions.R')
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
promoters
dir.create("data")
gc()
gtf
install.packages("BiocManager")
BiocManager::install("IRanges")
source('~/PromoterMutSpot/functions.R')
debug(filterMutations)
## Step2: find mutation with frequency > 3 (a predefined threshold)
mutationList = filterMutations(MUT, target_region = promoters,
minimal_freq = 3)
source('~/PromoterMutSpot/functions.R')
debug(filterMutations)
## Step2: find mutation with frequency > 3 (a predefined threshold)
mutationList = filterMutations(MUT, target_region = promoters,
minimal_freq = 3)
source('~/PromoterMutSpot/functions.R')
debug(filterMutations)
## Step2: find mutation with frequency > 3 (a predefined threshold)
mutationList = filterMutations(MUT, target_region = promoters,
minimal_freq = 3)
nrow(mt)
table(mt$donor) %>% length()
mt
table(mt$donor) %>% length()
mt = mt[start == end]
table(mt$donor) %>% length()
## Step2: find mutation with frequency > 3 (a predefined threshold)
f1 = "/home/zhangjing/predict_prob/single_mut.bed"
f2 = "/home/zhangjing/New_Analysis/single_mut.bed"
ls()
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/predict_prob/rmSNP_single_mut.bed"
source("functions.R")
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
save(promoters, file = "data/promoters.RData")
## Step2: find mutation with frequency > 3 (a predefined threshold)
all_mut = data.table::fread(MUT, header = FALSE)
all_mut
filterMutations <- function(mt, target_region, minimal_freq = 3L,
chrs = paste0("chr", c(1:22, "X", "Y")),
...) {
if (is.data.frame(mt)) {
mt <- data.table::as.data.table(mt)
} else if (file.exists(mt)) {
message("Reading ", mt)
mt <- data.table::fread(mt, ...)
} else {
stop("Bad input format for mutation list.")
}
if (is.data.frame(target_region)) {
target <- data.table::as.data.table(target_region)
} else if (file.exists(target_region)) {
message("Reading ", target_region)
target <- data.table::fread(target_region, ...)
} else {
stop("Bad input format for target region.")
}
## Preprocessing mutation list
mt = mt[, .(patient, chr, start, end)]
if (!isTRUE(startsWith(mt$chr[1], "chr"))) {
mt[, chr := paste0("chr", chr)]
}
mt[, `:=`(
start = as.integer(start),
end = as.integer(end)
)]
mt = mt[chr %in% chrs]
mt[, MUT_ID := paste(chr, start, end, sep = ":")]
## Preprocessing target region list
target = mt[, .(chr, start, end)]
if (!isTRUE(startsWith(target$chr[1], "chr"))) {
target[, chr := paste0("chr", chr)]
}
target[, `:=`(
start = as.integer(start),
end = as.integer(end)
)]
target = target[chr %in% chrs]
## Merge overlapping regions
target = target[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = .(chr)
)]
data.table::setkey(target, chr, start, end)
overlap_dt = data.table::foverlaps(x = mt, y = target, type = "within")
rm(mt, target_region)
return(overlap_dt)
}
colnames(all_mut) = c("chr", "start", "end", "patient")
all_mut[, start := end]
all_mut
all_patients = unique(all_mut$patient)
all_patients
all_patients %>% length()
save(all_patients, file = "all_patients.RData")
save(all_patients, file = "data/all_patients.RData")
debug(filterMutations)
mutationList = filterMutations(all_mut, target_region = promoters,
minimal_freq = 3)
mt
target
str(target)
str(mt)
target = target[, .(chr, start, end)]
if (!isTRUE(startsWith(target$chr[1], "chr"))) {
target[, chr := paste0("chr", chr)]
}
target[, `:=`(
start = as.integer(start),
end = as.integer(end)
)]
target <- data.table::as.data.table(target_region)
target = target[, .(chr, start, end)]
if (!isTRUE(startsWith(target$chr[1], "chr"))) {
target[, chr := paste0("chr", chr)]
}
target[, `:=`(
start = as.integer(start),
end = as.integer(end)
)]
target = target[chr %in% chrs]
## Merge overlapping regions
target = target[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = .(chr)
)]
target
target <- data.table::as.data.table(target_region)
target = target[, .(chr, start, end)]
if (!isTRUE(startsWith(target$chr[1], "chr"))) {
target[, chr := paste0("chr", chr)]
}
target[, `:=`(
start = as.integer(start),
end = as.integer(end)
)]
target = target[chr %in% chrs]
target
target[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = .(chr)
)]
target[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = chr
)]
install.packages("devtools")
BiocManager::install("Rdatatable/data.table")
target[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = chr
)]
target
target$chr = "chr1"
overlap_dt
overlap_dt[!is.na(start)]
overlap_dt = overlap_dt[!is.na(start)]
overlap_dt
overlap_dt[, .N, by = MUT_ID]
overlap_dt[, .N, by = MUT_ID][order(N, decreasing = TRUE)]
overlap_dt[, .N, by = MUT_ID][order(N, decreasing = TRUE)][N >=4]
freq_dt = overlap_dt[, .N, by = MUT_ID][order(N, decreasing = TRUE)][N >= minimal_freq]
freq_dt
overlap_dt
freq_dt
target
mt
freq_mut_dt = mt[MUT_ID %in% freq_dt$MUT_ID]
freq_mut_dt
target_region
freq_mut_dt
window_left = 5L
window_right = 5L
files_prefix = file.path(tempdir(), "fld_mut_list")
freq_mut_dt[, `:=`(
window_start := start - window_left,
window_end := end + window_right
)]
freq_mut_dt[, `:=`(
window_start = start - window_left,
window_end = end + window_right
)]
freq_mut_dt
data.table::keys(overlap_dt)
data.table::key(overlap_dt)
data.table::key(freq_mut_dt)
freq_mut_dt
overlap_dt
freq_mut_dt
freq_mut_dt[, `:=`(
pos_start = start,
pos_end = end,
start = start - window_left,
end = end + window_right
)]
overlap_dt
freq_mut_dt[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = .(chr))]
freq_mut_dt = freq_mut_dt[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = .(chr))]
freq_mut_dt
freq_mut_dt
freq_mut_dt$chr = "chr1"
overlap_dt
overlap_dt[, .(chr, i.start, i.end, patient)]
overlap_dt  = overlap_dt[, .(chr, i.start, i.end, patient)]
colnames(overlap_dt)[2:3] = c("start", "end")
overlap_dt
data.table::setkey(freq_mut_dt, chr, start, end)
out_dt = data.table::foverlaps(overlap_dt, freq_mut_dt, type = "any")
out_dt
out_dt = data.table::foverlaps(overlap_dt, freq_mut_dt, type = "any")[!is.na(start)]
out_dt
gc()
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/predict_prob/rmSNP_single_mut.bed"
source("functions.R")
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
