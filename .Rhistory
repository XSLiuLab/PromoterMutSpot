GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
gtf <- data.table::fread(GTF, header = FALSE, skip = "#")
head(gtf)
gtf <- gtf[V3 == "gene"]
gtf
extractGtfCol <- function(x, name) {
requireNamespace(magrittr)
stringr::str_extract(x, paste0(name, " ([^;]+);")) %>%
stringr::str_remove(paste0(name, " ")) %>%
stringr::str_remove_all("\"") %>%
stringr::str_remove(";")
}
gtf[, gene_name := extractGtfCol(V9, "gene_name")]
requireNamespace("magrittr")
extractGtfCol <- function(x, name) {
requireNamespace("magrittr")
stringr::str_extract(x, paste0(name, " ([^;]+);")) %>%
stringr::str_remove(paste0(name, " ")) %>%
stringr::str_remove_all("\"") %>%
stringr::str_remove(";")
}
gtf[, gene_name := extractGtfCol(V9, "gene_name")]
extractGtfCol <- function(x, name) {
loadNamespace("magrittr")
stringr::str_extract(x, paste0(name, " ([^;]+);")) %>%
stringr::str_remove(paste0(name, " ")) %>%
stringr::str_remove_all("\"") %>%
stringr::str_remove(";")
}
gtf[, gene_name := extractGtfCol(V9, "gene_name")]
extractGtfCol <- function(x, name) {
require("magrittr")
stringr::str_extract(x, paste0(name, " ([^;]+);")) %>%
stringr::str_remove(paste0(name, " ")) %>%
stringr::str_remove_all("\"") %>%
stringr::str_remove(";")
}
gtf[, gene_name := extractGtfCol(V9, "gene_name")]
gtf
gtf[, gene_biotype := extractGtfCol(V9, "gene_biotype")]
gtf
gtf[gene_biotype == "protein_coding", .(V1, V4, V5, V7, gene_name)]
gtf = gtf[gene_biotype == "protein_coding", .(V1, V4, V5, V7, gene_name)]
colnames(gtf) = c("chr", "start", "end", "strand", "gene_name")
gtf
upstream = 5000
downstream = -1
gtf[, chr := paste0("chr", chr)]
gtf[, gene_start := start]
gtf[, gene_end := end]
gtf
gtf[, `:=`(
start = ifelse(strand == "+", gene_start - upstream, gene_end - downstream),
end   = ifelse(strand == "+", gene_start + downstream, gene_end + upstream)
)]
gtf
gtf[, start := ifelse(start < 1, 1, start)]
table(gtf$chr)
chrs = paste0("chr", c(1:22, "X", "Y"))
chrs
gtf
gtf = gtf[chr %in% chrs]
gtf
str(gtf)
system("sort")
Sys.which("sort")
assert_sort_exists = function() {
if (length(Sys.which("sort")) < 1) {
stop("'sort' command not found. Are you in unix environment? If you are, check your PATH.")
}
}
assert_command_exists = function(cmd) {
if (length(Sys.which(cmd)) < 1) {
stop(paste0("'", cmd, "'"),
"command not found. Are you in unix environment? If you are, check your PATH.")
}
}
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/icgc_data/预处理所有突变.tsv"
source("functions.R")
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/icgc_data/预处理所有突变.tsv"
source("functions.R")
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/icgc_data/预处理所有突变.tsv"
source("functions.R")
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
source('~/PromoterMutSpot/functions.R')
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
promoters
dir.create("data")
gc()
gtf
install.packages("BiocManager")
BiocManager::install("IRanges")
source('~/PromoterMutSpot/functions.R')
debug(filterMutations)
## Step2: find mutation with frequency > 3 (a predefined threshold)
mutationList = filterMutations(MUT, target_region = promoters,
minimal_freq = 3)
source('~/PromoterMutSpot/functions.R')
debug(filterMutations)
## Step2: find mutation with frequency > 3 (a predefined threshold)
mutationList = filterMutations(MUT, target_region = promoters,
minimal_freq = 3)
source('~/PromoterMutSpot/functions.R')
debug(filterMutations)
## Step2: find mutation with frequency > 3 (a predefined threshold)
mutationList = filterMutations(MUT, target_region = promoters,
minimal_freq = 3)
nrow(mt)
table(mt$donor) %>% length()
mt
table(mt$donor) %>% length()
mt = mt[start == end]
table(mt$donor) %>% length()
## Step2: find mutation with frequency > 3 (a predefined threshold)
f1 = "/home/zhangjing/predict_prob/single_mut.bed"
f2 = "/home/zhangjing/New_Analysis/single_mut.bed"
ls()
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/predict_prob/rmSNP_single_mut.bed"
source("functions.R")
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
save(promoters, file = "data/promoters.RData")
## Step2: find mutation with frequency > 3 (a predefined threshold)
all_mut = data.table::fread(MUT, header = FALSE)
all_mut
filterMutations <- function(mt, target_region, minimal_freq = 3L,
chrs = paste0("chr", c(1:22, "X", "Y")),
...) {
if (is.data.frame(mt)) {
mt <- data.table::as.data.table(mt)
} else if (file.exists(mt)) {
message("Reading ", mt)
mt <- data.table::fread(mt, ...)
} else {
stop("Bad input format for mutation list.")
}
if (is.data.frame(target_region)) {
target <- data.table::as.data.table(target_region)
} else if (file.exists(target_region)) {
message("Reading ", target_region)
target <- data.table::fread(target_region, ...)
} else {
stop("Bad input format for target region.")
}
## Preprocessing mutation list
mt = mt[, .(patient, chr, start, end)]
if (!isTRUE(startsWith(mt$chr[1], "chr"))) {
mt[, chr := paste0("chr", chr)]
}
mt[, `:=`(
start = as.integer(start),
end = as.integer(end)
)]
mt = mt[chr %in% chrs]
mt[, MUT_ID := paste(chr, start, end, sep = ":")]
## Preprocessing target region list
target = mt[, .(chr, start, end)]
if (!isTRUE(startsWith(target$chr[1], "chr"))) {
target[, chr := paste0("chr", chr)]
}
target[, `:=`(
start = as.integer(start),
end = as.integer(end)
)]
target = target[chr %in% chrs]
## Merge overlapping regions
target = target[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = .(chr)
)]
data.table::setkey(target, chr, start, end)
overlap_dt = data.table::foverlaps(x = mt, y = target, type = "within")
rm(mt, target_region)
return(overlap_dt)
}
colnames(all_mut) = c("chr", "start", "end", "patient")
all_mut[, start := end]
all_mut
all_patients = unique(all_mut$patient)
all_patients
all_patients %>% length()
save(all_patients, file = "all_patients.RData")
save(all_patients, file = "data/all_patients.RData")
debug(filterMutations)
mutationList = filterMutations(all_mut, target_region = promoters,
minimal_freq = 3)
mt
target
str(target)
str(mt)
target = target[, .(chr, start, end)]
if (!isTRUE(startsWith(target$chr[1], "chr"))) {
target[, chr := paste0("chr", chr)]
}
target[, `:=`(
start = as.integer(start),
end = as.integer(end)
)]
target <- data.table::as.data.table(target_region)
target = target[, .(chr, start, end)]
if (!isTRUE(startsWith(target$chr[1], "chr"))) {
target[, chr := paste0("chr", chr)]
}
target[, `:=`(
start = as.integer(start),
end = as.integer(end)
)]
target = target[chr %in% chrs]
## Merge overlapping regions
target = target[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = .(chr)
)]
target
target <- data.table::as.data.table(target_region)
target = target[, .(chr, start, end)]
if (!isTRUE(startsWith(target$chr[1], "chr"))) {
target[, chr := paste0("chr", chr)]
}
target[, `:=`(
start = as.integer(start),
end = as.integer(end)
)]
target = target[chr %in% chrs]
target
target[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = .(chr)
)]
target[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = chr
)]
install.packages("devtools")
BiocManager::install("Rdatatable/data.table")
target[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = chr
)]
target
target$chr = "chr1"
overlap_dt
overlap_dt[!is.na(start)]
overlap_dt = overlap_dt[!is.na(start)]
overlap_dt
overlap_dt[, .N, by = MUT_ID]
overlap_dt[, .N, by = MUT_ID][order(N, decreasing = TRUE)]
overlap_dt[, .N, by = MUT_ID][order(N, decreasing = TRUE)][N >=4]
freq_dt = overlap_dt[, .N, by = MUT_ID][order(N, decreasing = TRUE)][N >= minimal_freq]
freq_dt
overlap_dt
freq_dt
target
mt
freq_mut_dt = mt[MUT_ID %in% freq_dt$MUT_ID]
freq_mut_dt
target_region
freq_mut_dt
window_left = 5L
window_right = 5L
files_prefix = file.path(tempdir(), "fld_mut_list")
freq_mut_dt[, `:=`(
window_start := start - window_left,
window_end := end + window_right
)]
freq_mut_dt[, `:=`(
window_start = start - window_left,
window_end = end + window_right
)]
freq_mut_dt
data.table::keys(overlap_dt)
data.table::key(overlap_dt)
data.table::key(freq_mut_dt)
freq_mut_dt
overlap_dt
freq_mut_dt
freq_mut_dt[, `:=`(
pos_start = start,
pos_end = end,
start = start - window_left,
end = end + window_right
)]
overlap_dt
freq_mut_dt[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = .(chr))]
freq_mut_dt = freq_mut_dt[, data.table::as.data.table(
IRanges::reduce(IRanges::IRanges(start, end)),
by = .(chr))]
freq_mut_dt
freq_mut_dt
freq_mut_dt$chr = "chr1"
overlap_dt
overlap_dt[, .(chr, i.start, i.end, patient)]
overlap_dt  = overlap_dt[, .(chr, i.start, i.end, patient)]
colnames(overlap_dt)[2:3] = c("start", "end")
overlap_dt
data.table::setkey(freq_mut_dt, chr, start, end)
out_dt = data.table::foverlaps(overlap_dt, freq_mut_dt, type = "any")
out_dt
out_dt = data.table::foverlaps(overlap_dt, freq_mut_dt, type = "any")[!is.na(start)]
out_dt
gc()
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/predict_prob/rmSNP_single_mut.bed"
source("functions.R")
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
## Raw data preprocessing: https://github.com/XSLiuLab/Noncoding-code-2020/blob/master/pipeline/20181215%20%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE.R
## https://github.com/XSLiuLab/Noncoding-code-2020/blob/master/pipeline/20181215%20%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE.R#L324
GTF = "/home/zhangjing/zhangjing_20200416/tmp_dat/Homo_sapiens.GRCh37.75.gtf"
MUT = "/home/zhangjing/zhangjing_20200416/tmp_dat/noncoding_mut"
Sys.setenv(PATH = paste("/home/zhangjing/bedtools2/bin/",
Sys.getenv("PATH"), sep = ":"))
data.table::setDTthreads(data.table::getDTthreads())
source("functions.R")
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
dir.create("data")
save(promoters, file = "data/promoters.RData")
load("data/promoters.RData")
## Step2: find mutation with frequency > 3 (a predefined threshold)
## Step3: create mutation centered 11 bp non-overlapping regions (the final region length may > 11)
all_mut = data.table::fread(MUT, header = FALSE)
colnames(all_mut) = c("chr", "start", "end", "patient")
all_mut[, start := end]
all_patients = unique(all_mut$patient)
save(all_patients, file = "data/all_patients.RData")
mutationList = filterMutations(all_mut, target_region = promoters,
minimal_freq = 4)
save(mutationList, file = "data/mutationList.RData")
## Step4: extract genetic and epigenetic annotations for all sites in each region
dir.create("data/annotations")
dir.create("data/annotations/genetic")
dir.create("data/annotations/epigenetic")
### Genetic annotations
## 3-base
genetic.mut_context = getMutContext(mutationList)
all_position_dt = genetic.mut_context[, .(chr, pos)]
all_position_dt[, `:=`(
start = pos,
end = pos
)][, pos := NULL]
## rep-time average_reptime_14celllines.bed for 3-base region
## check this file firstly
genetic.rep_time = annotate_position(
all_position_dt,
bed_dt = "data/annotations/genetic/average_reptime_14celllines.bed",
header = TRUE
)
genetic.mut_context
all_position_dt = genetic.mut_context[, .(chr, pos)]
all_position_dt[, `:=`(
start = pos,
end = pos
)][, pos := NULL]
all_position_dt
all_position_dt[, `:=`(start = as.integer(start),
end = as.integer(end))]
pos_bed = saveToBed(all_position_dt, path = "data/all_positions.bed")
## rep-time average_reptime_14celllines.bed for 3-base region
## check this file firstly
genetic.rep_time = annotate_position(
all_position_dt,
bed_dt = "data/annotations/genetic/average_reptime_14celllines.bed",
header = TRUE
)
## tfbs - use distance to tfbs midpoint
# https://github.com/XSLiuLab/Noncoding-code-2020/blob/master/others/TFBS.R
genetic.tfbs_distance = annotate_closet_distance(
all_position_dt,
bed_dt = "data/annotations/genetic/sorted.tfbs_midpoint_3cols.bed"
)
all_position_dt$index = paste0("Pos", 1:nrow(all_position_dt))
all_position_dt
pos_bed = saveToBed(all_position_dt, path = "data/all_positions.bed")
## gc content - sorted_hg19_gc1kb.bed
sortBed("data/annotations/genetic/hg19_gc1kb.bed",
bed_out = "data/annotations/genetic/sorted_hg19_gc1kb.bed")
## gc content - sorted_hg19_gc1kb.bed
# sortBed("data/annotations/genetic/hg19_gc1kb.bed",
#         bed_out = "data/annotations/genetic/sorted_hg19_gc1kb.bed")
genetic.gc_content = annotate_position(
all_position_dt,
bed_dt = "data/annotations/genetic/hg19_gc1kb.bed"
)
genetic.gc_content
## CpG island - sorted_cpg.bed
cpg <- data.table::fread("data/annotations/genetic/CpG_island_UCSC.tsv")
chr <- c(1:22,"X", "Y")
chr <- paste("chr", chr, sep= "")
cpg <- cpg[cpg$chrom %in% chr,]
bed <- cpg[,2:4]
bed$index <- 1
bed
cpg
cpg <- cpg[,2:4]
cpg
colnames(cpg) = c("chr", "start", "end")
genetic.cpg = annotate_position(
all_position_dt,
bed_dt = cpg
)
genetic.cpg
save(genetic.mut_context, genetic.cpg, genetic.gc_content,
genetic.rep_time, genetic.tfbs_distance,
file = "data/genetic_raw_features.RData")
### Epigenetic annotations (differ across tissues)
list.dirs("data/annotations/epigenetic/")
### Epigenetic annotations (differ across tissues)
list.dirs("data/annotations/epigenetic/")
### Epigenetic annotations (differ across tissues)
bed_dirs = list.dirs("data/annotations/epigenetic/")
bed_dirs[endsWith(bed_dirs, "bed")]
bed_dirs = bed_dirs[endsWith(bed_dirs, "bed")]
bed_dirs
file.remove("tmp.bed")
dirname("data/annotations/epigenetic//blood/bed" )
bed_dirs
epigenetic_list = list()
for (bed_dir in bed_dirs) {
dir_name = basename(dirname(bed_dir))
all_bed_files = list.files(bed_dir, pattern = "*.bed", full.names = TRUE)
temp_list = list()
for (bed in all_bed_files) {
temp_list[[basename(bed)]] = annotate_position(
all_position_dt,
bed_dt = bed
)
}
epigenetic_list[[dir_name]] = temp_list
}
epigenetic_list = list()
for (bed_dir in bed_dirs) {
message("Processing bed dir ", bed_dir)
dir_name = basename(dirname(bed_dir))
all_bed_files = list.files(bed_dir, pattern = "*.bed", full.names = TRUE)
temp_list = list()
for (bed in all_bed_files) {
message("> Handling file ", bed)
temp_list[[basename(bed)]] = annotate_position(
all_position_dt,
bed_dt = bed
)
}
epigenetic_list[[dir_name]] = temp_list
}
epigenetic_list = list()
for (bed_dir in bed_dirs) {
message("Processing bed dir ", bed_dir)
dir_name = basename(dirname(bed_dir))
all_bed_files = c(
list.files(bed_dir, pattern = "*hotspot.broad.bed", full.names = TRUE),
list.files(bed_dir, pattern = "*broadPeak.bed", full.names = TRUE)
)
temp_list = list()
for (bed in all_bed_files) {
message("> Handling file ", bed)
temp_list[[basename(bed)]] = annotate_position(
all_position_dt,
bed_dt = bed
)
}
epigenetic_list[[dir_name]] = temp_list
}
object.size(epigenetic_list)
object.size(epigenetic_list) / 1024 / 1024
epigenetic_list$blood$`E062-H3K27ac.broadPeak.bed`
save(epigenetic_list, file = "data/epigenetic_list.RData")
