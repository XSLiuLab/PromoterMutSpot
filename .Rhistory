source("functions.R")
## Step1: define promoter regions
promoters = getPromoters(GTF, upstream = 5000L, downstream = -1L)
dir.create("data")
save(promoters, file = "data/promoters.RData")
load("data/promoters.RData")
## Step2: find mutation with frequency > 3 (a predefined threshold)
## Step3: create mutation centered 11 bp non-overlapping regions (the final region length may > 11)
all_mut = data.table::fread(MUT, header = FALSE)
colnames(all_mut) = c("chr", "start", "end", "patient")
all_mut[, start := end]
all_patients = unique(all_mut$patient)
save(all_patients, file = "data/all_patients.RData")
mutationList = filterMutations(all_mut, target_region = promoters,
minimal_freq = 4)
save(mutationList, file = "data/mutationList.RData")
## Step4: extract genetic and epigenetic annotations for all sites in each region
dir.create("data/annotations")
dir.create("data/annotations/genetic")
dir.create("data/annotations/epigenetic")
### Genetic annotations
## 3-base
genetic.mut_context = getMutContext(mutationList)
all_position_dt = genetic.mut_context[, .(chr, pos)]
all_position_dt[, `:=`(
start = pos,
end = pos
)][, pos := NULL]
## rep-time average_reptime_14celllines.bed for 3-base region
## check this file firstly
genetic.rep_time = annotate_position(
all_position_dt,
bed_dt = "data/annotations/genetic/average_reptime_14celllines.bed",
header = TRUE
)
genetic.mut_context
all_position_dt = genetic.mut_context[, .(chr, pos)]
all_position_dt[, `:=`(
start = pos,
end = pos
)][, pos := NULL]
all_position_dt
all_position_dt[, `:=`(start = as.integer(start),
end = as.integer(end))]
pos_bed = saveToBed(all_position_dt, path = "data/all_positions.bed")
## rep-time average_reptime_14celllines.bed for 3-base region
## check this file firstly
genetic.rep_time = annotate_position(
all_position_dt,
bed_dt = "data/annotations/genetic/average_reptime_14celllines.bed",
header = TRUE
)
## tfbs - use distance to tfbs midpoint
# https://github.com/XSLiuLab/Noncoding-code-2020/blob/master/others/TFBS.R
genetic.tfbs_distance = annotate_closet_distance(
all_position_dt,
bed_dt = "data/annotations/genetic/sorted.tfbs_midpoint_3cols.bed"
)
all_position_dt$index = paste0("Pos", 1:nrow(all_position_dt))
all_position_dt
pos_bed = saveToBed(all_position_dt, path = "data/all_positions.bed")
## gc content - sorted_hg19_gc1kb.bed
sortBed("data/annotations/genetic/hg19_gc1kb.bed",
bed_out = "data/annotations/genetic/sorted_hg19_gc1kb.bed")
## gc content - sorted_hg19_gc1kb.bed
# sortBed("data/annotations/genetic/hg19_gc1kb.bed",
#         bed_out = "data/annotations/genetic/sorted_hg19_gc1kb.bed")
genetic.gc_content = annotate_position(
all_position_dt,
bed_dt = "data/annotations/genetic/hg19_gc1kb.bed"
)
genetic.gc_content
## CpG island - sorted_cpg.bed
cpg <- data.table::fread("data/annotations/genetic/CpG_island_UCSC.tsv")
chr <- c(1:22,"X", "Y")
chr <- paste("chr", chr, sep= "")
cpg <- cpg[cpg$chrom %in% chr,]
bed <- cpg[,2:4]
bed$index <- 1
bed
cpg
cpg <- cpg[,2:4]
cpg
colnames(cpg) = c("chr", "start", "end")
genetic.cpg = annotate_position(
all_position_dt,
bed_dt = cpg
)
genetic.cpg
save(genetic.mut_context, genetic.cpg, genetic.gc_content,
genetic.rep_time, genetic.tfbs_distance,
file = "data/genetic_raw_features.RData")
### Epigenetic annotations (differ across tissues)
list.dirs("data/annotations/epigenetic/")
### Epigenetic annotations (differ across tissues)
list.dirs("data/annotations/epigenetic/")
### Epigenetic annotations (differ across tissues)
bed_dirs = list.dirs("data/annotations/epigenetic/")
bed_dirs[endsWith(bed_dirs, "bed")]
bed_dirs = bed_dirs[endsWith(bed_dirs, "bed")]
bed_dirs
file.remove("tmp.bed")
dirname("data/annotations/epigenetic//blood/bed" )
bed_dirs
epigenetic_list = list()
for (bed_dir in bed_dirs) {
dir_name = basename(dirname(bed_dir))
all_bed_files = list.files(bed_dir, pattern = "*.bed", full.names = TRUE)
temp_list = list()
for (bed in all_bed_files) {
temp_list[[basename(bed)]] = annotate_position(
all_position_dt,
bed_dt = bed
)
}
epigenetic_list[[dir_name]] = temp_list
}
epigenetic_list = list()
for (bed_dir in bed_dirs) {
message("Processing bed dir ", bed_dir)
dir_name = basename(dirname(bed_dir))
all_bed_files = list.files(bed_dir, pattern = "*.bed", full.names = TRUE)
temp_list = list()
for (bed in all_bed_files) {
message("> Handling file ", bed)
temp_list[[basename(bed)]] = annotate_position(
all_position_dt,
bed_dt = bed
)
}
epigenetic_list[[dir_name]] = temp_list
}
epigenetic_list = list()
for (bed_dir in bed_dirs) {
message("Processing bed dir ", bed_dir)
dir_name = basename(dirname(bed_dir))
all_bed_files = c(
list.files(bed_dir, pattern = "*hotspot.broad.bed", full.names = TRUE),
list.files(bed_dir, pattern = "*broadPeak.bed", full.names = TRUE)
)
temp_list = list()
for (bed in all_bed_files) {
message("> Handling file ", bed)
temp_list[[basename(bed)]] = annotate_position(
all_position_dt,
bed_dt = bed
)
}
epigenetic_list[[dir_name]] = temp_list
}
object.size(epigenetic_list)
object.size(epigenetic_list) / 1024 / 1024
epigenetic_list$blood$`E062-H3K27ac.broadPeak.bed`
save(epigenetic_list, file = "data/epigenetic_list.RData")
load("D:/Code/PromoterMutSpot/data/mutationList.RData")
View(mutationList)
load("data/all_patients.RData")
mutationList
icgc_ids <- data.table::fread("data/icgc_projects_and_ids.tsv")
icgc_ids
icgc_ids <- icgc_ids[icgc_donor_id %in% all_patients]
length(table(mutationList$patient))
mutationList
load("data/all_positions.RData")
mut_df
cc = data.frame(a = c(1, 2), b = c(2, 3))
rep(cc, 2)
## Should use all ICGC ids? or all_patienst? or all ids with mutation left in promoters?
## use the second appraoch for now.
mut_df[, .(chr, position)]
## Should use all ICGC ids? or all_patienst? or all ids with mutation left in promoters?
## use the second appraoch for now.
mut_df[, .(chr, position)][[rep(seq(nrow(mut_df)), nrow(icgc_ids))]]
## Should use all ICGC ids? or all_patienst? or all ids with mutation left in promoters?
## use the second appraoch for now.
mut_df[, .(chr, position)][[rep(seq(nrow(mut_df)), nrow(icgc_ids)),]]
## Should use all ICGC ids? or all_patienst? or all ids with mutation left in promoters?
## use the second appraoch for now.
mut_df[, .(chr, position)][rep(seq(nrow(mut_df)), nrow(icgc_ids)),]
## Should use all ICGC ids? or all_patienst? or all ids with mutation left in promoters?
## use the second appraoch for now.
mut_df[, .(chr, position)][rep(seq(nrow(mut_df)), each = nrow(icgc_ids)),]
## Should use all ICGC ids? or all_patienst? or all ids with mutation left in promoters?
## use the second appraoch for now.
patient_dt = mut_df[, .(chr, position)][rep(seq(nrow(mut_df)), each = nrow(icgc_ids)),]
icgc_ids$icgc_donor_id
icgc_ids$icgc_donor_id
rep(icgc_ids$icgc_donor_id, nrow(mut_df))
patient_dt[, patient := rep(icgc_ids$icgc_donor_id, nrow(mut_df))]
patient_dt
patient_dt[c(4269:4270)]
mut_df
mut_df
load("data/mutationList.RData")
load("data/all_patients.RData")
load("data/all_positions.RData")
icgc_ids <- data.table::fread("data/icgc_projects_and_ids.tsv")
icgc_ids <- icgc_ids[icgc_donor_id %in% all_patients]
type_list = list(
lung = c("LUSC-CN", "LUSC-KR"),
esophagus = c("ESAD-UK","ESCA-CN"),
liver = c("LIAD-FR", "LICA-CN", "LICA-FR", "LINC-JP", "LIRI-JP"),
breast = c("BRCA-EU","BRCA-FR","BRCA-US"),
pancreas = c("PACA-AU","PACA-CA","PAEN-AU","PAEN-IT"),
kidney = c("RECA-EU"),
blood = c("ALL-US","CLLE-ES","MALY-DE","NKTL-SG"),
ovary = c("OV-AU"),
melanoma = c("MELA-AU","SKCA-BR","SKCM-US")
)
mut_df
## For each cancer type,
## generate the data.frame used for training and fitting
model_data = list()
icgc_ids
## For each cancer type,
## generate the data.frame used for training and fitting
model_data = lapply(type_list, function(type) {
type_ids = icgc_ids[project_code %in% type]
patient_dt = mut_df[, .(chr, position, pos)][rep(seq(nrow(mut_df)), each = nrow(type_ids)),]
patient_dt[, patient := rep(type_ids$icgc_donor_id, nrow(mut_df))]
})
model_data$lung
load("data/all_genetics.RData")
load("data/all_epigenetics.RData")
all_epigenetics
names(all_epigenetics)
names(all_epigenetics) = c(
"blood", "breast", "esophagus", "kidney",
"liver", "lung", "ovary", "pancreas", "melanoma"
)
all_epigenetics$blood
mutationList
## For each cancer type,
## generate the data.frame used for training and fitting
model_data = lapply(type_list, function(type) {
message("Processing ", type)
type_ids = icgc_ids[project_code %in% type]
patient_dt = mut_df[, .(chr, position, pos)][rep(seq(nrow(mut_df)), each = nrow(type_ids)),]
patient_dt[, patient := rep(type_ids$icgc_donor_id, nrow(mut_df))]
patient_dt
## Add genetics
## Add epigenetics
## Set all 0 to positions and 0 to all NA features
## And reassign 1 to actual mutation location in patients
})
## For each cancer type,
## generate the data.frame used for training and fitting
model_data = lapply(type_list, function(type) {
message("Processing ", paste0(type, collapse = " "))
type_ids = icgc_ids[project_code %in% type]
patient_dt = mut_df[, .(chr, position, pos)][rep(seq(nrow(mut_df)), each = nrow(type_ids)),]
patient_dt[, patient := rep(type_ids$icgc_donor_id, nrow(mut_df))]
patient_dt
## Add genetics
## Add epigenetics
## Set all 0 to positions and 0 to all NA features
## And reassign 1 to actual mutation location in patients
})
model_data$lung
all_genetics
all_epigenetics$blood
type_list[[1]]
mutationList
## For each cancer type,
## generate the data.frame used for training and fitting
model_data = lapply(seq_along(type_list), function(i) {
cancer = names(type_list)[i]
type = type_list[[i]]
message("Processing ", paste0(type, collapse = " "), " for ", cancer)
type_ids = icgc_ids[project_code %in% type]
patient_dt = mut_df[, .(chr, position, pos)][rep(seq(nrow(mut_df)), each = nrow(type_ids)),]
patient_dt[, patient := rep(type_ids$icgc_donor_id, nrow(mut_df))]
# chr  position     pos  patient
# 1: chr1   6845287    Pos1  DO51591
# 2: chr1   6845287    Pos1  DO51583
# 3: chr1   6845287    Pos1  DO51585
## Add genetics
patient_dt = merge(patient_dt, all_genetics, by = c("pos"), all.x = TRUE)
## Add epigenetics
patient_dt = merge(patient_dt, all_epigenetics[[cancer]], by.x = "pos", by.y = "index",
all.x = TRUE)
## Set all 0 to positions and 0 to all NA features
patient_dt = dplyr::mutate_if(patient_dt,
~any(is.na(.)),
~ifelse(is.na(.), 0, .)) %>%
dplyr::mutate(y = 0) %>%
data.table::as.data.table()
## And reassign 1 to actual mutation location in patients
patient_dt[chr == mutationList$chr & position == mutationList$i.start & patient == mutationList$patient,
y := 1]
patient_dt
})
## For each cancer type,
## generate the data.frame used for training and fitting
model_data = lapply(seq_along(type_list), function(i) {
require(magrittr)
cancer = names(type_list)[i]
type = type_list[[i]]
message("Processing ", paste0(type, collapse = " "), " for ", cancer)
type_ids = icgc_ids[project_code %in% type]
patient_dt = mut_df[, .(chr, position, pos)][rep(seq(nrow(mut_df)), each = nrow(type_ids)),]
patient_dt[, patient := rep(type_ids$icgc_donor_id, nrow(mut_df))]
# chr  position     pos  patient
# 1: chr1   6845287    Pos1  DO51591
# 2: chr1   6845287    Pos1  DO51583
# 3: chr1   6845287    Pos1  DO51585
## Add genetics
patient_dt = merge(patient_dt, all_genetics, by = c("pos"), all.x = TRUE)
## Add epigenetics
patient_dt = merge(patient_dt, all_epigenetics[[cancer]], by.x = "pos", by.y = "index",
all.x = TRUE)
## Set all 0 to positions and 0 to all NA features
patient_dt = dplyr::mutate_if(patient_dt,
~any(is.na(.)),
~ifelse(is.na(.), 0, .)) %>%
dplyr::mutate(y = 0) %>%
data.table::as.data.table()
## And reassign 1 to actual mutation location in patients
patient_dt[chr == mutationList$chr & position == mutationList$i.start & patient == mutationList$patient,
y := 1]
patient_dt
})
## For each cancer type,
## generate the data.frame used for training and fitting
model_data = lapply(seq_along(type_list), function(i) {
require(magrittr)
cancer = names(type_list)[i]
type = type_list[[i]]
message("Processing ", paste0(type, collapse = " "), " for ", cancer)
type_ids = icgc_ids[project_code %in% type]
patient_dt = mut_df[, .(chr, position, pos)][rep(seq(nrow(mut_df)), each = nrow(type_ids)),]
patient_dt[, patient := rep(type_ids$icgc_donor_id, nrow(mut_df))]
# chr  position     pos  patient
# 1: chr1   6845287    Pos1  DO51591
# 2: chr1   6845287    Pos1  DO51583
# 3: chr1   6845287    Pos1  DO51585
## Add genetics
patient_dt = merge(patient_dt, all_genetics, by = c("pos"), all.x = TRUE)
## Add epigenetics
patient_dt = merge(patient_dt, all_epigenetics[[cancer]], by.x = "pos", by.y = "index",
all.x = TRUE)
## Set all 0 to positions and 0 to all NA features
patient_dt = dplyr::mutate_if(patient_dt,
~any(is.na(.)),
~ifelse(is.na(.), 0, .)) %>%
dplyr::mutate(y = 0) %>%
data.table::as.data.table()
## And reassign 1 to actual mutation location in patients
patient_dt[chr %in% mutationList$chr & position %in% mutationList$i.start %in% patient == mutationList$patient,
y := 1]
patient_dt
})
## For each cancer type,
## generate the data.frame used for training and fitting
model_data = lapply(seq_along(type_list), function(i) {
require(magrittr)
cancer = names(type_list)[i]
type = type_list[[i]]
message("Processing ", paste0(type, collapse = " "), " for ", cancer)
type_ids = icgc_ids[project_code %in% type]
patient_dt = mut_df[, .(chr, position, pos)][rep(seq(nrow(mut_df)), each = nrow(type_ids)),]
patient_dt[, patient := rep(type_ids$icgc_donor_id, nrow(mut_df))]
# chr  position     pos  patient
# 1: chr1   6845287    Pos1  DO51591
# 2: chr1   6845287    Pos1  DO51583
# 3: chr1   6845287    Pos1  DO51585
## Add genetics
patient_dt = merge(patient_dt, all_genetics, by = c("pos"), all.x = TRUE)
## Add epigenetics
patient_dt = merge(patient_dt, all_epigenetics[[cancer]], by.x = "pos", by.y = "index",
all.x = TRUE)
## Set all 0 to positions and 0 to all NA features
patient_dt = dplyr::mutate_if(patient_dt,
~any(is.na(.)),
~ifelse(is.na(.), 0, .)) %>%
dplyr::mutate(y = 0) %>%
data.table::as.data.table()
## And reassign 1 to actual mutation location in patients
patient_dt[chr %in% mutationList$chr & position %in% mutationList$i.start & patient %in% mutationList$patient,
y := 1]
patient_dt
})
model_data[[1]]
model_data[[1]]$y %>% sum
rm(model_data)
mutationList
mutationList[1]
## For each cancer type,
## generate the data.frame used for training and fitting
model_data_list = lapply(seq_along(type_list), function(i) {
require(magrittr)
cancer = names(type_list)[i]
type = type_list[[i]]
message("Processing ", paste0(type, collapse = " "), " for ", cancer)
type_ids = icgc_ids[project_code %in% type]
patient_dt = mut_df[, .(chr, position, pos)][rep(seq(nrow(mut_df)), each = nrow(type_ids)),]
patient_dt[, patient := rep(type_ids$icgc_donor_id, nrow(mut_df))]
# chr  position     pos  patient
# 1: chr1   6845287    Pos1  DO51591
# 2: chr1   6845287    Pos1  DO51583
# 3: chr1   6845287    Pos1  DO51585
## Add genetics
patient_dt = merge(patient_dt, all_genetics, by = c("pos"), all.x = TRUE)
## Add epigenetics
patient_dt = merge(patient_dt, all_epigenetics[[cancer]], by.x = "pos", by.y = "index",
all.x = TRUE)
## Set all 0 to positions and 0 to all NA features
patient_dt = dplyr::mutate_if(patient_dt,
~any(is.na(.)),
~ifelse(is.na(.), 0, .)) %>%
dplyr::mutate(y = 0) %>%
data.table::as.data.table()
## And reassign 1 to actual mutation location in patients
temp = mutationList[patient %in% unique(patient_dt$patient)]
cat("Updating")
for (i in 1:nrow(temp)) {
cat(i, " ")
patient_dt[chr == temp$chr & position == temp$i.start & patient == temp$patient,
y := 1]
}
patient_dt
})
## For each cancer type,
## generate the data.frame used for training and fitting
model_data_list = lapply(seq_along(type_list), function(i) {
require(magrittr)
cancer = names(type_list)[i]
type = type_list[[i]]
message("Processing ", paste0(type, collapse = " "), " for ", cancer)
type_ids = icgc_ids[project_code %in% type]
patient_dt = mut_df[, .(chr, position, pos)][rep(seq(nrow(mut_df)), each = nrow(type_ids)),]
patient_dt[, patient := rep(type_ids$icgc_donor_id, nrow(mut_df))]
# chr  position     pos  patient
# 1: chr1   6845287    Pos1  DO51591
# 2: chr1   6845287    Pos1  DO51583
# 3: chr1   6845287    Pos1  DO51585
## Add genetics
patient_dt = merge(patient_dt, all_genetics, by = c("pos"), all.x = TRUE)
## Add epigenetics
patient_dt = merge(patient_dt, all_epigenetics[[cancer]], by.x = "pos", by.y = "index",
all.x = TRUE)
## Set all 0 to positions and 0 to all NA features
patient_dt = dplyr::mutate_if(patient_dt,
~any(is.na(.)),
~ifelse(is.na(.), 0, .)) %>%
dplyr::mutate(y = 0) %>%
data.table::as.data.table()
## And reassign 1 to actual mutation location in patients
temp = mutationList[patient %in% unique(patient_dt$patient)]
cat("Updating")
for (i in 1:nrow(temp)) {
cat(i, " ")
patient_dt[chr == temp[i]$chr & position == temp[i]$i.start & patient == temp[i]$patient,
y := 1]
}
patient_dt
})
## For each cancer type,
## generate the data.frame used for training and fitting
model_data_list = lapply(seq_along(type_list), function(i) {
require(magrittr)
cancer = names(type_list)[i]
type = type_list[[i]]
message("Processing ", paste0(type, collapse = " "), " for ", cancer)
type_ids = icgc_ids[project_code %in% type]
message("> Constructing all region postion data.frame for all patient")
patient_dt = mut_df[, .(chr, position, pos)][rep(seq(nrow(mut_df)), each = nrow(type_ids)),]
patient_dt[, patient := rep(type_ids$icgc_donor_id, nrow(mut_df))]
# chr  position     pos  patient
# 1: chr1   6845287    Pos1  DO51591
# 2: chr1   6845287    Pos1  DO51583
# 3: chr1   6845287    Pos1  DO51585
## Add genetics
message("> Adding genetic annotations")
patient_dt = merge(patient_dt, all_genetics, by = c("pos"), all.x = TRUE)
## Add epigenetics
message("> Adding epigenetic annotations")
patient_dt = merge(patient_dt, all_epigenetics[[cancer]], by.x = "pos", by.y = "index",
all.x = TRUE)
## Set all 0 to positions and 0 to all NA features
message("> Filling 0 to NA values")
patient_dt = dplyr::mutate_if(patient_dt,
~any(is.na(.)),
~ifelse(is.na(.), 0, .)) %>%
dplyr::mutate(y = 0) %>%
data.table::as.data.table()
## And reassign 1 to actual mutation location in patients
temp = mutationList[patient %in% unique(patient_dt$patient)]
message("> Updating ", nrow(temp), " mutations")
for (i in 1:nrow(temp)) {
patient_dt[chr == temp[i]$chr & position == temp[i]$i.start & patient == temp[i]$patient,
y := 1]
}
patient_dt
})
names(model_data_list) = names(type_list)
model_data_list$lung
sapply(model_data_list, function(x) x$y) %>% sum()
sapply(model_data_list, function(x) sum(x$y)) %>% sum()
mutationList
all(mutationList$patient %in% all_patients)
model_data = data.table::rbindlist(model_data_list, fill = TRUE, idcol = "cancer")
save(model_data, file = "model_data.RData")
length(unique(model_data$patient))
sapply(type_list, length)
sum(sapply(type_list, length))
z = data.table::fread("data/icgc_projects_and_ids.tsv")
length(unique(z$project_code))
# Available for cancers we used
Reduce(c, type_list)
# Available for cancers we used
nrow(z[project_code %in% Reduce(c, type_list)])
